# terminate the tmux server along with all the sessions, windows, and panes that are currently running within it
# tmux kill-server

# Modern colors
set -ga terminal-overrides ",alacritty:Tc"

#--------------------------------------------------------------------------
# Shell Management
#--------------------------------------------------------------------------

# Set the default shell, and set the default command to use our shell (this
# means we source things properly, show the correct PS1 etc).
set -g default-shell ${SHELL}
set -g default-command ${SHELL}

#--------------------------------------------------------------------------
# Mouse Management
#--------------------------------------------------------------------------
# Enable mouse mode (tmux 2.1 and above)
set -g mouse on

#--------------------------------------------------------------------------
# Key Bindings
#--------------------------------------------------------------------------

# -r means that the bind can repeat without entering prefix again
# -n means that the bind doesn't use the prefix

# Set ctrl + space as the prefix
set-option -g prefix C-Space

# Send prefix to a nested tmux session by doubling the prefix
bind C-Space send-prefix

# 'PREFIX r' to reload of the config file
unbind r
bind r source-file $HOME/.config/tmux/tmux.conf \; display-message "$HOME/.config/tmux/tmux.conf reloaded"

# When we add/remove windows, renumber them in sequential order.
set -g renumber-windows on

# Move around panes like in vim
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# Cycle through windows using Meta + p/n
bind-key -n M-h previous-window
bind-key -n M-l next-window

# Move the current window to the next window or previous window position
bind -r N run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) + 1)"
bind -r P run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) - 1)"

# use prefix+| (or prefix+\) to split window horizontally and prefix+- or
# (prefix+_) to split vertically also use the current pane path to define the
# new pane path
bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# # Switch between two most recently used windows
# bind Space last-window

# # switch between two most recently used sessions
# bind b switch-client -l

# change the path for newly created windows
bind c new-window -c "#{pane_current_path}"

# Enable focus events, which are needed to keep vim's focus events working when
# vim is running inside tmux.
set -g focus-events on

#--------------------------------------------------------------------------
# Plugins
#--------------------------------------------------------------------------

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin "nordtheme/tmux"

# set -g @resurrect-capture-pane-contents 'on'
# set -g @continuum-restore 'on'

run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.config/tmux/plugins/tpm/tpm

#--------------------------------------------------------------------------
# Status Bar
#--------------------------------------------------------------------------

# # To toggle the status bar
# bind-key T set-option -g status

# # Turn on the status bar
# set-option -g status on

# # Set the refresh interval for the status bar to 1 second
# set-option -g status-interval 1

# # Center the status bar text
# set-option -g status-justify centre

# # Set the position of the status bar to the bottom of the screen
# set-option -g status-position bottom

# # Set the text and background colors of the status bar
# # set-option -g status-style fg=colour136,bg=colour235
# set -g status-style "bg=#16161e,fg=#5a78b1" # bg=black, fg=gold

# # Set the length of the left side of the status bar
# set-option -g status-left-length 20

# # Set the style of the text on the left side of the status bar to the default style
# set-option -g status-left-style default

# # Set the text on the left side of the status bar. It displays the hostname in white
# set-option -g status-left "#[fg=white]#H #[fg=default]#[default]"

# # Set the length of the right side of the status bar
# set-option -g status-right-length 140

# # Set the style of the text on the right side of the status bar to the default style
# set-option -g status-right-style default

# # Display the system uptime in white on the riight side of the status bar
# set-option -g status-right "#[fg=white,dim,bg=default]#(uptime -p) "

# # Append text to the right side of the status bar. It displays the date in white on a default background color.
# set-option -ag status-right " #[fg=white,bg=default]%a %d-%b-%Y"

# # Set the text color of the window status line
# set-window-option -g window-status-style fg=colour244

# # Set the background color of the window status line
# set-window-option -g window-status-style bg=default

# # Set the text color of the current window in the window status line
# set-window-option -g window-status-current-style fg=colour166

# # Set the background color of the current window in the window status line
# set-window-option -g window-status-current-style bg=default

# Set the key bindings for the status bar to Vi-style
#set-option -g status-keys vi
